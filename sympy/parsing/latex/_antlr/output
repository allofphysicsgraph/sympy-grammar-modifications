[1,2,3,1,2,3] cleanup.sh install.sh LaTeX.g4 LaTeX.interp LaTeXLexer.interp LaTeXLexer.py LaTeXLexer.tokens LaTeXListener.py LaTeXParser.py LaTeX.py latex_tests LaTeX.tokens LaTeXVisitor.py Makefile __pycache__ rename.py requirements.txt run.sh run_test_input.sh test1.expr test_e test_input [4,5,6,7,8,9]


input_stream:
[1,2,3,1,2,3] cleanup.sh install.sh LaTeX.g4 LaTeX.interp LaTeXLexer.interp LaTeXLexer.py LaTeXLexer.tokens LaTeXListener.py LaTeXParser.py LaTeX.py latex_tests LaTeX.tokens LaTeXVisitor.py Makefile __pycache__ rename.py requirements.txt run.sh run_test_input.sh test1.expr test_e test_input [4,5,6,7,8,9]


tokens:
[@0,0:0='[',<393>,1:0]
[@1,1:1='1',<362>,1:1]
[@2,2:2=',',<360>,1:2]
[@3,3:3='2',<362>,1:3]
[@4,4:4=',',<360>,1:4]
[@5,5:5='3',<362>,1:5]
[@6,6:6=',',<360>,1:6]
[@7,7:7='1',<362>,1:7]
[@8,8:8=',',<360>,1:8]
[@9,9:9='2',<362>,1:9]
[@10,10:10=',',<360>,1:10]
[@11,11:11='3',<362>,1:11]
[@12,12:12=']',<394>,1:12]
[@13,14:14='c',<123>,1:14]
[@14,16:16='e',<115>,1:16]
[@15,17:17='a',<116>,1:17]
[@16,18:18='n',<112>,1:18]
[@17,20:20='p',<101>,1:20]
[@18,21:21='.',<363>,1:21]
[@19,22:22='s',<111>,1:22]
[@20,25:25='i',<129>,1:25]
[@21,26:26='n',<112>,1:26]
[@22,27:27='s',<111>,1:27]
[@23,28:28='t',<107>,1:28]
[@24,29:29='a',<116>,1:29]
[@25,32:32='.',<363>,1:32]
[@26,33:33='s',<111>,1:33]
[@27,36:36='L',<125>,1:36]
[@28,37:37='a',<116>,1:37]
[@29,38:38='T',<91>,1:38]
[@30,39:39='e',<115>,1:39]
[@31,41:41='.',<363>,1:41]
[@32,42:42='g',<113>,1:42]
[@33,43:43='4',<362>,1:43]
[@34,45:45='L',<125>,1:45]
[@35,46:46='a',<116>,1:46]
[@36,47:47='T',<91>,1:47]
[@37,48:48='e',<115>,1:48]
[@38,50:50='.',<363>,1:50]
[@39,51:51='i',<129>,1:51]
[@40,52:52='n',<112>,1:52]
[@41,53:53='t',<107>,1:53]
[@42,54:54='e',<115>,1:54]
[@43,55:55='r',<108>,1:55]
[@44,56:56='p',<101>,1:56]
[@45,58:58='L',<125>,1:58]
[@46,59:59='a',<116>,1:59]
[@47,60:60='T',<91>,1:60]
[@48,61:61='e',<115>,1:61]
[@49,63:63='L',<125>,1:63]
[@50,64:64='e',<115>,1:64]
[@51,65:65='x',<103>,1:65]
[@52,66:66='e',<115>,1:66]
[@53,67:67='r',<108>,1:67]
[@54,68:68='.',<363>,1:68]
[@55,69:69='i',<129>,1:69]
[@56,70:70='n',<112>,1:70]
[@57,71:71='t',<107>,1:71]
[@58,72:72='e',<115>,1:72]
[@59,73:73='r',<108>,1:73]
[@60,74:74='p',<101>,1:74]
[@61,76:76='L',<125>,1:76]
[@62,77:77='a',<116>,1:77]
[@63,78:78='T',<91>,1:78]
[@64,79:79='e',<115>,1:79]
[@65,81:81='L',<125>,1:81]
[@66,82:82='e',<115>,1:82]
[@67,83:83='x',<103>,1:83]
[@68,84:84='e',<115>,1:84]
[@69,85:85='r',<108>,1:85]
[@70,86:86='.',<363>,1:86]
[@71,87:87='p',<101>,1:87]
[@72,88:88='y',<104>,1:88]
[@73,90:90='L',<125>,1:90]
[@74,91:91='a',<116>,1:91]
[@75,92:92='T',<91>,1:92]
[@76,93:93='e',<115>,1:93]
[@77,95:95='L',<125>,1:95]
[@78,96:96='e',<115>,1:96]
[@79,97:97='x',<103>,1:97]
[@80,98:98='e',<115>,1:98]
[@81,99:99='r',<108>,1:99]
[@82,100:100='.',<363>,1:100]
[@83,101:101='t',<107>,1:101]
[@84,103:103='k',<121>,1:103]
[@85,104:104='e',<115>,1:104]
[@86,105:105='n',<112>,1:105]
[@87,106:106='s',<111>,1:106]
[@88,108:108='L',<125>,1:108]
[@89,109:109='a',<116>,1:109]
[@90,110:110='T',<91>,1:110]
[@91,111:111='e',<115>,1:111]
[@92,113:113='L',<125>,1:113]
[@93,114:114='i',<129>,1:114]
[@94,115:115='s',<111>,1:115]
[@95,116:116='t',<107>,1:116]
[@96,117:117='e',<115>,1:117]
[@97,118:118='n',<112>,1:118]
[@98,119:119='e',<115>,1:119]
[@99,120:120='r',<108>,1:120]
[@100,121:121='.',<363>,1:121]
[@101,122:122='p',<101>,1:122]
[@102,123:123='y',<104>,1:123]
[@103,125:125='L',<125>,1:125]
[@104,126:126='a',<116>,1:126]
[@105,127:127='T',<91>,1:127]
[@106,128:128='e',<115>,1:128]
[@107,131:131='a',<116>,1:131]
[@108,132:132='r',<108>,1:132]
[@109,133:133='s',<111>,1:133]
[@110,134:134='e',<115>,1:134]
[@111,135:135='r',<108>,1:135]
[@112,136:136='.',<363>,1:136]
[@113,137:137='p',<101>,1:137]
[@114,138:138='y',<104>,1:138]
[@115,140:140='L',<125>,1:140]
[@116,141:141='a',<116>,1:141]
[@117,142:142='T',<91>,1:142]
[@118,143:143='e',<115>,1:143]
[@119,145:145='.',<363>,1:145]
[@120,146:146='p',<101>,1:146]
[@121,147:147='y',<104>,1:147]
[@122,150:150='a',<116>,1:150]
[@123,151:151='t',<107>,1:151]
[@124,152:152='e',<115>,1:152]
[@125,153:153='x',<103>,1:153]
[@126,154:154='_',<359>,1:154]
[@127,155:155='t',<107>,1:155]
[@128,156:156='e',<115>,1:156]
[@129,157:157='s',<111>,1:157]
[@130,158:158='t',<107>,1:158]
[@131,159:159='s',<111>,1:159]
[@132,161:161='L',<125>,1:161]
[@133,162:162='a',<116>,1:162]
[@134,163:163='T',<91>,1:163]
[@135,164:164='e',<115>,1:164]
[@136,166:166='.',<363>,1:166]
[@137,167:167='t',<107>,1:167]
[@138,169:169='k',<121>,1:169]
[@139,170:170='e',<115>,1:170]
[@140,171:171='n',<112>,1:171]
[@141,172:172='s',<111>,1:172]
[@142,174:174='L',<125>,1:174]
[@143,175:175='a',<116>,1:175]
[@144,176:176='T',<91>,1:176]
[@145,177:177='e',<115>,1:177]
[@146,179:179='V',<124>,1:179]
[@147,180:180='i',<129>,1:180]
[@148,181:181='s',<111>,1:181]
[@149,182:182='i',<129>,1:182]
[@150,183:183='t',<107>,1:183]
[@151,185:185='r',<108>,1:185]
[@152,186:186='.',<363>,1:186]
[@153,187:187='p',<101>,1:187]
[@154,188:188='y',<104>,1:188]
[@155,190:190='M',<100>,1:190]
[@156,191:191='a',<116>,1:191]
[@157,192:192='k',<121>,1:192]
[@158,193:193='e',<115>,1:193]
[@159,195:195='i',<129>,1:195]
[@160,197:197='e',<115>,1:197]
[@161,199:199='_',<359>,1:199]
[@162,200:200='_',<359>,1:200]
[@163,201:201='p',<101>,1:201]
[@164,202:202='y',<104>,1:202]
[@165,203:203='c',<123>,1:203]
[@166,204:204='a',<116>,1:204]
[@167,205:205='c',<123>,1:205]
[@168,207:207='e',<115>,1:207]
[@169,208:208='_',<359>,1:208]
[@170,209:209='_',<359>,1:209]
[@171,211:211='r',<108>,1:211]
[@172,212:212='e',<115>,1:212]
[@173,213:213='n',<112>,1:213]
[@174,214:214='a',<116>,1:214]
[@175,215:215='m',<110>,1:215]
[@176,216:216='e',<115>,1:216]
[@177,217:217='.',<363>,1:217]
[@178,218:218='p',<101>,1:218]
[@179,219:219='y',<104>,1:219]
[@180,221:221='r',<108>,1:221]
[@181,222:222='e',<115>,1:222]
[@182,223:223='q',<114>,1:223]
[@183,225:225='i',<129>,1:225]
[@184,226:226='r',<108>,1:226]
[@185,227:227='e',<115>,1:227]
[@186,228:228='m',<110>,1:228]
[@187,229:229='e',<115>,1:229]
[@188,230:230='n',<112>,1:230]
[@189,231:231='t',<107>,1:231]
[@190,232:232='s',<111>,1:232]
[@191,233:233='.',<363>,1:233]
[@192,234:234='t',<107>,1:234]
[@193,235:235='x',<103>,1:235]
[@194,236:236='t',<107>,1:236]
[@195,238:238='r',<108>,1:238]
[@196,240:240='n',<112>,1:240]
[@197,241:241='.',<363>,1:241]
[@198,242:242='s',<111>,1:242]
[@199,245:245='r',<108>,1:245]
[@200,247:247='n',<112>,1:247]
[@201,248:248='_',<359>,1:248]
[@202,249:249='t',<107>,1:249]
[@203,250:250='e',<115>,1:250]
[@204,251:251='s',<111>,1:251]
[@205,252:252='t',<107>,1:252]
[@206,253:253='_',<359>,1:253]
[@207,254:254='i',<129>,1:254]
[@208,255:255='n',<112>,1:255]
[@209,256:256='p',<101>,1:256]
[@210,258:258='t',<107>,1:258]
[@211,259:259='.',<363>,1:259]
[@212,260:260='s',<111>,1:260]
[@213,263:263='t',<107>,1:263]
[@214,264:264='e',<115>,1:264]
[@215,265:265='s',<111>,1:265]
[@216,266:266='t',<107>,1:266]
[@217,267:268='1.',<363>,1:267]
[@218,269:269='e',<115>,1:269]
[@219,270:270='x',<103>,1:270]
[@220,271:271='p',<101>,1:271]
[@221,272:272='r',<108>,1:272]
[@222,274:274='t',<107>,1:274]
[@223,275:275='e',<115>,1:275]
[@224,276:276='s',<111>,1:276]
[@225,277:277='t',<107>,1:277]
[@226,278:278='_',<359>,1:278]
[@227,279:279='e',<115>,1:279]
[@228,281:281='t',<107>,1:281]
[@229,282:282='e',<115>,1:282]
[@230,283:283='s',<111>,1:283]
[@231,284:284='t',<107>,1:284]
[@232,285:285='_',<359>,1:285]
[@233,286:286='i',<129>,1:286]
[@234,287:287='n',<112>,1:287]
[@235,288:288='p',<101>,1:288]
[@236,290:290='t',<107>,1:290]
[@237,292:292='[',<393>,1:292]
[@238,293:293='4',<362>,1:293]
[@239,294:294=',',<360>,1:294]
[@240,295:295='5',<362>,1:295]
[@241,296:296=',',<360>,1:296]
[@242,297:297='6',<362>,1:297]
[@243,298:298=',',<360>,1:298]
[@244,299:299='7',<362>,1:299]
[@245,300:300=',',<360>,1:300]
[@246,301:301='8',<362>,1:301]
[@247,302:302=',',<360>,1:302]
[@248,303:303='9',<362>,1:303]
[@249,304:304=']',<394>,1:304]
[@250,305:305='\n',<361>,1:305]



[@251,306:305='<EOF>',<-1>,2:0]

tree:
(prog 
   (expr 
      (array_1_d [ 
         (number 1) , 
         (number 2) , 
         (number 3) , 
         (number 1) , 
         (number 2) , 
         (number 3) ])) 
   (expr 
      (symbols c)) 
   (expr 
      (symbols e)) 
   (expr 
      (symbols a)) 
   (expr 
      (symbols n)) 
   (expr 
      (symbols p)) 
   (expr 
      (number .)) 
   (expr 
      (symbols s)) 
   (expr 
      (symbols i)) 
   (expr 
      (symbols n)) 
   (expr 
      (symbols s)) 
   (expr 
      (symbols t)) 
   (expr 
      (symbols a)) 
   (expr 
      (number .)) 
   (expr 
      (symbols s)) 
   (expr 
      (symbols L)) 
   (expr 
      (symbols a)) 
   (expr 
      (symbols T)) 
   (expr 
      (symbols e)) 
   (expr 
      (number .)) 
   (expr 
      (symbols g)) 
   (expr 
      (number 4)) 
   (expr 
      (symbols L)) 
   (expr 
      (symbols a)) 
   (expr 
      (symbols T)) 
   (expr 
      (symbols e)) 
   (expr 
      (number .)) 
   (expr 
      (symbols i)) 
   (expr 
      (symbols n)) 
   (expr 
      (symbols t)) 
   (expr 
      (symbols e)) 
   (expr 
      (symbols r)) 
   (expr 
      (symbols p)) 
   (expr 
      (symbols L)) 
   (expr 
      (symbols a)) 
   (expr 
      (symbols T)) 
   (expr 
      (symbols e)) 
   (expr 
      (symbols L)) 
   (expr 
      (symbols e)) 
   (expr 
      (symbols x)) 
   (expr 
      (symbols e)) 
   (expr 
      (symbols r)) 
   (expr 
      (number .)) 
   (expr 
      (symbols i)) 
   (expr 
      (symbols n)) 
   (expr 
      (symbols t)) 
   (expr 
      (symbols e)) 
   (expr 
      (symbols r)) 
   (expr 
      (symbols p)) 
   (expr 
      (symbols L)) 
   (expr 
      (symbols a)) 
   (expr 
      (symbols T)) 
   (expr 
      (symbols e)) 
   (expr 
      (symbols L)) 
   (expr 
      (symbols e)) 
   (expr 
      (symbols x)) 
   (expr 
      (symbols e)) 
   (expr 
      (symbols r)) 
   (expr 
      (number .)) 
   (expr 
      (symbols p)) 
   (expr 
      (symbols y)) 
   (expr 
      (symbols L)) 
   (expr 
      (symbols a)) 
   (expr 
      (symbols T)) 
   (expr 
      (symbols e)) 
   (expr 
      (symbols L)) 
   (expr 
      (symbols e)) 
   (expr 
      (symbols x)) 
   (expr 
      (symbols e)) 
   (expr 
      (symbols r)) 
   (expr 
      (number .)) 
   (expr 
      (symbols t)) 
   (expr 
      (symbols k)) 
   (expr 
      (symbols e)) 
   (expr 
      (symbols n)) 
   (expr 
      (symbols s)) 
   (expr 
      (symbols L)) 
   (expr 
      (symbols a)) 
   (expr 
      (symbols T)) 
   (expr 
      (symbols e)) 
   (expr 
      (symbols L)) 
   (expr 
      (symbols i)) 
   (expr 
      (symbols s)) 
   (expr 
      (symbols t)) 
   (expr 
      (symbols e)) 
   (expr 
      (symbols n)) 
   (expr 
      (symbols e)) 
   (expr 
      (symbols r)) 
   (expr 
      (number .)) 
   (expr 
      (symbols p)) 
   (expr 
      (symbols y)) 
   (expr 
      (symbols L)) 
   (expr 
      (symbols a)) 
   (expr 
      (symbols T)) 
   (expr 
      (symbols e)) 
   (expr 
      (symbols a)) 
   (expr 
      (symbols r)) 
   (expr 
      (symbols s)) 
   (expr 
      (symbols e)) 
   (expr 
      (symbols r)) 
   (expr 
      (number .)) 
   (expr 
      (symbols p)) 
   (expr 
      (symbols y)) 
   (expr 
      (symbols L)) 
   (expr 
      (symbols a)) 
   (expr 
      (symbols T)) 
   (expr 
      (symbols e)) 
   (expr 
      (number .)) 
   (expr 
      (symbols p)) 
   (expr 
      (symbols y)) 
   (expr 
      (symbols a)) 
   (expr 
      (symbols t)) 
   (expr 
      (symbols e)) 
   (expr 
      (expr 
         (symbols x)) _ 
      (expr 
         (symbols t))) 
   (expr 
      (symbols e)) 
   (expr 
      (symbols s)) 
   (expr 
      (symbols t)) 
   (expr 
      (symbols s)) 
   (expr 
      (symbols L)) 
   (expr 
      (symbols a)) 
   (expr 
      (symbols T)) 
   (expr 
      (symbols e)) 
   (expr 
      (number .)) 
   (expr 
      (symbols t)) 
   (expr 
      (symbols k)) 
   (expr 
      (symbols e)) 
   (expr 
      (symbols n)) 
   (expr 
      (symbols s)) 
   (expr 
      (symbols L)) 
   (expr 
      (symbols a)) 
   (expr 
      (symbols T)) 
   (expr 
      (symbols e)) 
   (expr 
      (symbols V)) 
   (expr 
      (symbols i)) 
   (expr 
      (symbols s)) 
   (expr 
      (symbols i)) 
   (expr 
      (symbols t)) 
   (expr 
      (symbols r)) 
   (expr 
      (number .)) 
   (expr 
      (symbols p)) 
   (expr 
      (symbols y)) 
   (expr 
      (symbols M)) 
   (expr 
      (symbols a)) 
   (expr 
      (symbols k)) 
   (expr 
      (symbols e)) 
   (expr 
      (symbols i)) 
   (expr 
      (expr 
         (symbols e)) _ 
      (expr _ 
         (symbols p))) 
   (expr 
      (symbols y)) 
   (expr 
      (symbols c)) 
   (expr 
      (symbols a)) 
   (expr 
      (symbols c)) 
   (expr 
      (expr 
         (symbols e)) _ 
      (expr _ 
         (symbols r))) 
   (expr 
      (symbols e)) 
   (expr 
      (symbols n)) 
   (expr 
      (symbols a)) 
   (expr 
      (symbols m)) 
   (expr 
      (symbols e)) 
   (expr 
      (number .)) 
   (expr 
      (symbols p)) 
   (expr 
      (symbols y)) 
   (expr 
      (symbols r)) 
   (expr 
      (symbols e)) 
   (expr 
      (symbols q)) 
   (expr 
      (symbols i)) 
   (expr 
      (symbols r)) 
   (expr 
      (symbols e)) 
   (expr 
      (symbols m)) 
   (expr 
      (symbols e)) 
   (expr 
      (symbols n)) 
   (expr 
      (symbols t)) 
   (expr 
      (symbols s)) 
   (expr 
      (number .)) 
   (expr 
      (symbols t)) 
   (expr 
      (symbols x)) 
   (expr 
      (symbols t)) 
   (expr 
      (symbols r)) 
   (expr 
      (symbols n)) 
   (expr 
      (number .)) 
   (expr 
      (symbols s)) 
   (expr 
      (symbols r)) 
   (expr 
      (expr 
         (symbols n)) _ 
      (expr 
         (symbols t))) 
   (expr 
      (symbols e)) 
   (expr 
      (symbols s)) 
   (expr 
      (expr 
         (symbols t)) _ 
      (expr 
         (symbols i))) 
   (expr 
      (symbols n)) 
   (expr 
      (symbols p)) 
   (expr 
      (symbols t)) 
   (expr 
      (number .)) 
   (expr 
      (symbols s)) 
   (expr 
      (symbols t)) 
   (expr 
      (symbols e)) 
   (expr 
      (symbols s)) 
   (expr 
      (symbols t)) 
   (expr 
      (number 1.)) 
   (expr 
      (symbols e)) 
   (expr 
      (symbols x)) 
   (expr 
      (symbols p)) 
   (expr 
      (symbols r)) 
   (expr 
      (symbols t)) 
   (expr 
      (symbols e)) 
   (expr 
      (symbols s)) 
   (expr 
      (expr 
         (symbols t)) _ 
      (expr 
         (symbols e))) 
   (expr 
      (symbols t)) 
   (expr 
      (symbols e)) 
   (expr 
      (symbols s)) 
   (expr 
      (expr 
         (symbols t)) _ 
      (expr 
         (symbols i))) 
   (expr 
      (symbols n)) 
   (expr 
      (symbols p)) 
   (expr 
      (symbols t)) 
   (expr 
      (array_1_d [ 
         (number 4) , 
         (number 5) , 
         (number 6) , 
         (number 7) , 
         (number 8) , 
         (number 9) ])) \n)

calc:
[1, 2, 3, 1, 2, 3]
[4, 5, 6, 7, 8, 9]

result:
None
frac{1}{9.5 - q}


input_stream:
frac{1}{9.5 - q}


tokens:
[@0,1:1='r',<108>,1:1]
[@1,2:2='a',<116>,1:2]
[@2,3:3='c',<123>,1:3]
[@3,4:4='{',<391>,1:4]
[@4,5:5='1',<362>,1:5]
[@5,6:6='}',<392>,1:6]
[@6,7:7='{',<391>,1:7]
[@7,8:10='9.5',<363>,1:8]
[@8,12:12='-',<354>,1:12]
[@9,14:14='q',<114>,1:14]
[@10,15:15='}',<392>,1:15]
[@11,16:16='\n',<361>,1:16]



[@12,17:16='<EOF>',<-1>,2:0]

tree:
(prog 
   (expr 
      (symbols r)) 
   (expr 
      (symbols a)) 
   (expr 
      (symbols c)) 
   (expr { 
      (expr 
         (number 1)) }) 
   (expr { 
      (expr 
         (expr 
            (number 9.5)) - 
         (expr 
            (symbols q))) }) \n)

calc:

result:
None
a^2


input_stream:
a^2


tokens:
[@0,0:0='a',<116>,1:0]
[@1,1:1='^',<355>,1:1]
[@2,2:2='2',<362>,1:2]
[@3,3:3='\n',<361>,1:3]



[@4,4:3='<EOF>',<-1>,2:0]

tree:
(prog 
   (expr 
      (expr 
         (symbols a)) ^ 
      (expr 
         (number 2))) \n)

calc:

result:
None
cos(x)


input_stream:
cos(x)


tokens:
[@0,0:0='c',<123>,1:0]
[@1,2:2='s',<111>,1:2]
[@2,3:3='(',<389>,1:3]
[@3,4:4='x',<103>,1:4]
[@4,5:5=')',<390>,1:5]
[@5,6:6='\n',<361>,1:6]



[@6,7:6='<EOF>',<-1>,2:0]

tree:
(prog 
   (expr 
      (symbols c)) 
   (expr 
      (symbols s)) 
   (expr ( 
      (expr 
         (symbols x)) )) \n)

calc:

result:
None
sin(x)


input_stream:
sin(x)


tokens:
[@0,0:0='s',<111>,1:0]
[@1,1:1='i',<129>,1:1]
[@2,2:2='n',<112>,1:2]
[@3,3:3='(',<389>,1:3]
[@4,4:4='x',<103>,1:4]
[@5,5:5=')',<390>,1:5]
[@6,6:6='\n',<361>,1:6]



[@7,7:6='<EOF>',<-1>,2:0]

tree:
(prog 
   (expr 
      (symbols s)) 
   (expr 
      (symbols i)) 
   (expr 
      (symbols n)) 
   (expr ( 
      (expr 
         (symbols x)) )) \n)

calc:

result:
None
(sin(x))^2


input_stream:
(sin(x))^2


tokens:
[@0,0:0='(',<389>,1:0]
[@1,1:1='s',<111>,1:1]
[@2,2:2='i',<129>,1:2]
[@3,3:3='n',<112>,1:3]
[@4,4:4='(',<389>,1:4]
[@5,5:5='x',<103>,1:5]
[@6,6:6=')',<390>,1:6]
[@7,7:7=')',<390>,1:7]
[@8,8:8='^',<355>,1:8]
[@9,9:9='2',<362>,1:9]
[@10,10:10='\n',<361>,1:10]



[@11,11:10='<EOF>',<-1>,2:0]

tree:
(prog 
   (expr ( 
      (expr 
         (symbols s)) <missing ')'>) 
   (expr 
      (symbols i)) 
   (expr 
      (symbols n)) 
   (expr ( 
      (expr 
         (symbols x)) )))

calc:

result:
None
2 pi


input_stream:
2 pi


tokens:
[@0,0:0='2',<362>,1:0]
[@1,2:2='p',<101>,1:2]
[@2,3:3='i',<129>,1:3]
[@3,4:4='\n',<361>,1:4]



[@4,5:4='<EOF>',<-1>,2:0]

tree:
(prog 
   (expr 
      (number 2)) 
   (expr 
      (symbols p)) 
   (expr 
      (symbols i)) \n)

calc:

result:
None
hbar


input_stream:
hbar


tokens:
[@0,1:1='b',<109>,1:1]
[@1,2:2='a',<116>,1:2]
[@2,3:3='r',<108>,1:3]
[@3,4:4='\n',<361>,1:4]



[@4,5:4='<EOF>',<-1>,2:0]

tree:
(prog 
   (expr 
      (symbols b)) 
   (expr 
      (symbols a)) 
   (expr 
      (symbols r)) \n)

calc:

result:
None
W


input_stream:
W


tokens:
[@0,0:0='W',<119>,1:0]
[@1,1:1='\n',<361>,1:1]



[@2,2:1='<EOF>',<-1>,2:0]

tree:
(prog 
   (expr 
      (symbols W)) \n)

calc:

result:
None
2 i


input_stream:
2 i


tokens:
[@0,0:0='2',<362>,1:0]
[@1,2:2='i',<129>,1:2]
[@2,3:3='\n',<361>,1:3]



[@3,4:3='<EOF>',<-1>,2:0]

tree:
(prog 
   (expr 
      (number 2)) 
   (expr 
      (symbols i)) \n)

calc:

result:
None
2


input_stream:
2


tokens:
[@0,0:0='2',<362>,1:0]
[@1,1:1='\n',<361>,1:1]



[@2,2:1='<EOF>',<-1>,2:0]

tree:
(prog 
   (expr 
      (number 2)) \n)

calc:

result:
None
vec{p}_{2}


input_stream:
vec{p}_{2}


tokens:
[@0,0:0='v',<106>,1:0]
[@1,1:1='e',<115>,1:1]
[@2,2:2='c',<123>,1:2]
[@3,3:3='{',<391>,1:3]
[@4,4:4='p',<101>,1:4]
[@5,5:5='}',<392>,1:5]
[@6,6:6='_',<359>,1:6]
[@7,7:7='{',<391>,1:7]
[@8,8:8='2',<362>,1:8]
[@9,9:9='}',<392>,1:9]
[@10,10:10='\n',<361>,1:10]



[@11,11:10='<EOF>',<-1>,2:0]

tree:
(prog 
   (expr 
      (symbols v)) 
   (expr 
      (symbols e)) 
   (expr 
      (symbols c)) 
   (expr 
      (expr { 
         (expr 
            (symbols p)) }) _ 
      (expr { 
         (expr 
            (number 2)) })) \n)

calc:

result:
None
m/m


input_stream:
m/m


tokens:
[@0,0:0='m',<110>,1:0]
[@1,1:1='/',<357>,1:1]
[@2,2:2='m',<110>,1:2]
[@3,3:3='\n',<361>,1:3]



[@4,4:3='<EOF>',<-1>,2:0]

tree:
(prog 
   (expr 
      (expr 
         (symbols m)) / 
      (expr 
         (symbols m))) \n)

calc:
<class 'NoneType'>

result:
None
1/2


input_stream:
1/2


tokens:
[@0,0:0='1',<362>,1:0]
[@1,1:1='/',<357>,1:1]
[@2,2:2='2',<362>,1:2]
[@3,3:3='\n',<361>,1:3]



[@4,4:3='<EOF>',<-1>,2:0]

tree:
(prog 
   (expr 
      (expr 
         (number 1)) / 
      (expr 
         (number 2))) \n)

calc:
<class 'int'>

result:
None
x


input_stream:
x


tokens:
[@0,0:0='x',<103>,1:0]
[@1,1:1='\n',<361>,1:1]



[@2,2:1='<EOF>',<-1>,2:0]

tree:
(prog 
   (expr 
      (symbols x)) \n)

calc:

result:
None
a


input_stream:
a


tokens:
[@0,0:0='a',<116>,1:0]
[@1,1:1='\n',<361>,1:1]



[@2,2:1='<EOF>',<-1>,2:0]

tree:
(prog 
   (expr 
      (symbols a)) \n)

calc:

result:
None
i hbar


input_stream:
i hbar


tokens:
[@0,0:0='i',<129>,1:0]
[@1,3:3='b',<109>,1:3]
[@2,4:4='a',<116>,1:4]
[@3,5:5='r',<108>,1:5]
[@4,6:6='\n',<361>,1:6]



[@5,7:6='<EOF>',<-1>,2:0]

tree:
(prog 
   (expr 
      (symbols i)) 
   (expr 
      (symbols b)) 
   (expr 
      (symbols a)) 
   (expr 
      (symbols r)) \n)

calc:

result:
None
b/(2 a)


input_stream:
b/(2 a)


tokens:
[@0,0:0='b',<109>,1:0]
[@1,1:1='/',<357>,1:1]
[@2,2:2='(',<389>,1:2]
[@3,3:3='2',<362>,1:3]
[@4,5:5='a',<116>,1:5]
[@5,6:6=')',<390>,1:6]
[@6,7:7='\n',<361>,1:7]



[@7,8:7='<EOF>',<-1>,2:0]

tree:
(prog 
   (expr 
      (expr 
         (symbols b)) / 
      (expr ( 
         (expr 
            (number 2)) a ))) \n)

calc:
<class 'NoneType'>

result:
None
b/(2 a)


input_stream:
b/(2 a)


tokens:
[@0,0:0='b',<109>,1:0]
[@1,1:1='/',<357>,1:1]
[@2,2:2='(',<389>,1:2]
[@3,3:3='2',<362>,1:3]
[@4,5:5='a',<116>,1:5]
[@5,6:6=')',<390>,1:6]
[@6,7:7='\n',<361>,1:7]



[@7,8:7='<EOF>',<-1>,2:0]

tree:
(prog 
   (expr 
      (expr 
         (symbols b)) / 
      (expr ( 
         (expr 
            (number 2)) a ))) \n)

calc:
<class 'NoneType'>

result:
None
sin(-x)


input_stream:
sin(-x)


tokens:
[@0,0:0='s',<111>,1:0]
[@1,1:1='i',<129>,1:1]
[@2,2:2='n',<112>,1:2]
[@3,3:3='(',<389>,1:3]
[@4,4:4='-',<354>,1:4]
[@5,5:5='x',<103>,1:5]
[@6,6:6=')',<390>,1:6]
[@7,7:7='\n',<361>,1:7]



[@8,8:7='<EOF>',<-1>,2:0]

tree:
(prog 
   (expr 
      (symbols s)) 
   (expr 
      (symbols i)) 
   (expr 
      (symbols n)) 
   (expr ( 
      (expr 
         (symbols -)) x )) \n)

calc:

result:
None
1/2


input_stream:
1/2


tokens:
[@0,0:0='1',<362>,1:0]
[@1,1:1='/',<357>,1:1]
[@2,2:2='2',<362>,1:2]
[@3,3:3='\n',<361>,1:3]



[@4,4:3='<EOF>',<-1>,2:0]

tree:
(prog 
   (expr 
      (expr 
         (number 1)) / 
      (expr 
         (number 2))) \n)

calc:
<class 'int'>

result:
None
2 pi


input_stream:
2 pi


tokens:
[@0,0:0='2',<362>,1:0]
[@1,2:2='p',<101>,1:2]
[@2,3:3='i',<129>,1:3]
[@3,4:4='\n',<361>,1:4]



[@4,5:4='<EOF>',<-1>,2:0]

tree:
(prog 
   (expr 
      (number 2)) 
   (expr 
      (symbols p)) 
   (expr 
      (symbols i)) \n)

calc:

result:
None
t


input_stream:
t


tokens:
[@0,0:0='t',<107>,1:0]
[@1,1:1='\n',<361>,1:1]



[@2,2:1='<EOF>',<-1>,2:0]

tree:
(prog 
   (expr 
      (symbols t)) \n)

calc:

result:
None
cos(-x)


input_stream:
cos(-x)


tokens:
[@0,0:0='c',<123>,1:0]
[@1,2:2='s',<111>,1:2]
[@2,3:3='(',<389>,1:3]
[@3,4:4='-',<354>,1:4]
[@4,5:5='x',<103>,1:5]
[@5,6:6=')',<390>,1:6]
[@6,7:7='\n',<361>,1:7]



[@7,8:7='<EOF>',<-1>,2:0]

tree:
(prog 
   (expr 
      (symbols c)) 
   (expr 
      (symbols s)) 
   (expr ( 
      (expr 
         (symbols -)) x )) \n)

calc:

result:
None
-1


input_stream:
-1


tokens:
[@0,0:0='-',<354>,1:0]
[@1,1:1='1',<362>,1:1]
[@2,2:2='\n',<361>,1:2]



[@3,3:2='<EOF>',<-1>,2:0]

tree:
(prog 
   (expr 
      (symbols -)) 
   (expr 
      (number 1)) \n)

calc:

result:
None
2


input_stream:
2


tokens:
[@0,0:0='2',<362>,1:0]
[@1,1:1='\n',<361>,1:1]



[@2,2:1='<EOF>',<-1>,2:0]

tree:
(prog 
   (expr 
      (number 2)) \n)

calc:

result:
None
x


input_stream:
x


tokens:
[@0,0:0='x',<103>,1:0]
[@1,1:1='\n',<361>,1:1]



[@2,2:1='<EOF>',<-1>,2:0]

tree:
(prog 
   (expr 
      (symbols x)) \n)

calc:

result:
None
-x


input_stream:
-x


tokens:
[@0,0:0='-',<354>,1:0]
[@1,1:1='x',<103>,1:1]
[@2,2:2='\n',<361>,1:2]



[@3,3:2='<EOF>',<-1>,2:0]

tree:
(prog 
   (expr 
      (symbols -)) 
   (expr 
      (symbols x)) \n)

calc:

result:
None
hbar


input_stream:
hbar


tokens:
[@0,1:1='b',<109>,1:1]
[@1,2:2='a',<116>,1:2]
[@2,3:3='r',<108>,1:3]
[@3,4:4='\n',<361>,1:4]



[@4,5:4='<EOF>',<-1>,2:0]

tree:
(prog 
   (expr 
      (symbols b)) 
   (expr 
      (symbols a)) 
   (expr 
      (symbols r)) \n)

calc:

result:
None
dx


input_stream:
dx


tokens:
[@0,0:1='dx',<143>,1:0]
[@1,2:2='\n',<361>,1:2]



[@2,3:2='<EOF>',<-1>,2:0]

tree:
(prog 
   (expr 
      (symbols dx)) \n)

calc:

result:
None
-sin(x)


input_stream:
-sin(x)


tokens:
[@0,0:0='-',<354>,1:0]
[@1,1:1='s',<111>,1:1]
[@2,2:2='i',<129>,1:2]
[@3,3:3='n',<112>,1:3]
[@4,4:4='(',<389>,1:4]
[@5,5:5='x',<103>,1:5]
[@6,6:6=')',<390>,1:6]
[@7,7:7='\n',<361>,1:7]



[@8,8:7='<EOF>',<-1>,2:0]

tree:
(prog 
   (expr 
      (symbols -)) 
   (expr 
      (symbols s)) 
   (expr 
      (symbols i)) 
   (expr 
      (symbols n)) 
   (expr ( 
      (expr 
         (symbols x)) )) \n)

calc:

result:
None
2 x


input_stream:
2 x


tokens:
[@0,0:0='2',<362>,1:0]
[@1,2:2='x',<103>,1:2]
[@2,3:3='\n',<361>,1:3]



[@3,4:3='<EOF>',<-1>,2:0]

tree:
(prog 
   (expr 
      (number 2)) 
   (expr 
      (symbols x)) \n)

calc:

result:
None
y


input_stream:
y


tokens:
[@0,0:0='y',<104>,1:0]
[@1,1:1='\n',<361>,1:1]



[@2,2:1='<EOF>',<-1>,2:0]

tree:
(prog 
   (expr 
      (symbols y)) \n)

calc:

result:
None
(b/(2 a))^2


input_stream:
(b/(2 a))^2


tokens:
[@0,0:0='(',<389>,1:0]
[@1,1:1='b',<109>,1:1]
[@2,2:2='/',<357>,1:2]
[@3,3:3='(',<389>,1:3]
[@4,4:4='2',<362>,1:4]
[@5,6:6='a',<116>,1:6]
[@6,7:7=')',<390>,1:7]
[@7,8:8=')',<390>,1:8]
[@8,9:9='^',<355>,1:9]
[@9,10:10='2',<362>,1:10]
[@10,11:11='\n',<361>,1:11]



[@11,12:11='<EOF>',<-1>,2:0]

tree:
(prog 
   (expr 
      (expr ( 
         (expr 
            (expr 
               (symbols b)) / 
            (expr ( 
               (expr 
                  (number 2)) a ))) )) ^ 
   (expr 
      (number 2))) \n)

calc:
<class 'NoneType'>

result:
None
x


input_stream:
x


tokens:
[@0,0:0='x',<103>,1:0]
[@1,1:1='\n',<361>,1:1]



[@2,2:1='<EOF>',<-1>,2:0]

tree:
(prog 
   (expr 
      (symbols x)) \n)

calc:

result:
None
2


input_stream:
2


tokens:
[@0,0:0='2',<362>,1:0]
[@1,1:1='\n',<361>,1:1]



[@2,2:1='<EOF>',<-1>,2:0]

tree:
(prog 
   (expr 
      (number 2)) \n)

calc:

result:
None
a


input_stream:
a


tokens:
[@0,0:0='a',<116>,1:0]
[@1,1:1='\n',<361>,1:1]



[@2,2:1='<EOF>',<-1>,2:0]

tree:
(prog 
   (expr 
      (symbols a)) \n)

calc:

result:
None
x


input_stream:
x


tokens:
[@0,0:0='x',<103>,1:0]
[@1,1:1='\n',<361>,1:1]



[@2,2:1='<EOF>',<-1>,2:0]

tree:
(prog 
   (expr 
      (symbols x)) \n)

calc:

result:
None
h


input_stream:
h


tokens:
[@0,1:1='\n',<361>,1:1]



[@1,2:1='<EOF>',<-1>,2:0]

tree:
prog

calc:

result:
None
x


input_stream:
x


tokens:
[@0,0:0='x',<103>,1:0]
[@1,1:1='\n',<361>,1:1]



[@2,2:1='<EOF>',<-1>,2:0]

tree:
(prog 
   (expr 
      (symbols x)) \n)

calc:

result:
None
a


input_stream:
a


tokens:
[@0,0:0='a',<116>,1:0]
[@1,1:1='\n',<361>,1:1]



[@2,2:1='<EOF>',<-1>,2:0]

tree:
(prog 
   (expr 
      (symbols a)) \n)

calc:

result:
None
a_{\alpha} \langle \psi_{\alpha} | \psi_{\beta} \rangle


input_stream:
a_{\alpha} \langle \psi_{\alpha} | \psi_{\beta} \rangle


tokens:
[@0,0:0='a',<116>,1:0]
[@1,1:1='_',<359>,1:1]
[@2,2:2='{',<391>,1:2]
[@3,3:8='\alpha',<436>,1:3]
[@4,9:9='}',<392>,1:9]
[@5,11:17='\langle',<149>,1:11]
[@6,19:22='\psi',<436>,1:19]
[@7,23:23='_',<359>,1:23]
[@8,24:24='{',<391>,1:24]
[@9,25:30='\alpha',<436>,1:25]
[@10,31:31='}',<392>,1:31]
[@11,35:38='\psi',<436>,1:35]
[@12,39:39='_',<359>,1:39]
[@13,40:40='{',<391>,1:40]
[@14,41:45='\beta',<436>,1:41]
[@15,46:46='}',<392>,1:46]
[@16,48:54='\rangle',<150>,1:48]
[@17,55:55='\n',<361>,1:55]



[@18,56:55='<EOF>',<-1>,2:0]

tree:
(prog 
   (expr 
      (expr 
         (symbols a)) _ 
      (expr { 
         (expr 
            (symbols \alpha)) })) 
   (expr 
      (symbols \langle)) 
   (expr 
      (expr 
         (symbols \psi)) _ 
      (expr { 
         (expr 
            (symbols \alpha)) })) 
   (expr 
      (expr 
         (symbols \psi)) _ 
      (expr { 
         (expr 
            (symbols \beta)) })) 
   (expr 
      (symbols \rangle)) \n)

calc:

result:
None
y


input_stream:
y


tokens:
[@0,0:0='y',<104>,1:0]
[@1,1:1='\n',<361>,1:1]



[@2,2:1='<EOF>',<-1>,2:0]

tree:
(prog 
   (expr 
      (symbols y)) \n)

calc:

result:
None
(b/(2 a))^2


input_stream:
(b/(2 a))^2


tokens:
[@0,0:0='(',<389>,1:0]
[@1,1:1='b',<109>,1:1]
[@2,2:2='/',<357>,1:2]
[@3,3:3='(',<389>,1:3]
[@4,4:4='2',<362>,1:4]
[@5,6:6='a',<116>,1:6]
[@6,7:7=')',<390>,1:7]
[@7,8:8=')',<390>,1:8]
[@8,9:9='^',<355>,1:9]
[@9,10:10='2',<362>,1:10]
[@10,11:11='\n',<361>,1:11]



[@11,12:11='<EOF>',<-1>,2:0]

tree:
(prog 
   (expr 
      (expr ( 
         (expr 
            (expr 
               (symbols b)) / 
            (expr ( 
               (expr 
                  (number 2)) a ))) )) ^ 
   (expr 
      (number 2))) \n)

calc:
<class 'NoneType'>

result:
None
x


input_stream:
x


tokens:
[@0,0:0='x',<103>,1:0]
[@1,1:1='\n',<361>,1:1]



[@2,2:1='<EOF>',<-1>,2:0]

tree:
(prog 
   (expr 
      (symbols x)) \n)

calc:

result:
None
2


input_stream:
2


tokens:
[@0,0:0='2',<362>,1:0]
[@1,1:1='\n',<361>,1:1]



[@2,2:1='<EOF>',<-1>,2:0]

tree:
(prog 
   (expr 
      (number 2)) \n)

calc:

result:
None
a


input_stream:
a


tokens:
[@0,0:0='a',<116>,1:0]
[@1,1:1='\n',<361>,1:1]



[@2,2:1='<EOF>',<-1>,2:0]

tree:
(prog 
   (expr 
      (symbols a)) \n)

calc:

result:
None
x


input_stream:
x


tokens:
[@0,0:0='x',<103>,1:0]
[@1,1:1='\n',<361>,1:1]



[@2,2:1='<EOF>',<-1>,2:0]

tree:
(prog 
   (expr 
      (symbols x)) \n)

calc:

result:
None
h


input_stream:
h


tokens:
[@0,1:1='\n',<361>,1:1]



[@1,2:1='<EOF>',<-1>,2:0]

tree:
prog

calc:

result:
None
x


input_stream:
x


tokens:
[@0,0:0='x',<103>,1:0]
[@1,1:1='\n',<361>,1:1]



[@2,2:1='<EOF>',<-1>,2:0]

tree:
(prog 
   (expr 
      (symbols x)) \n)

calc:

result:
None
a


input_stream:
a


tokens:
[@0,0:0='a',<116>,1:0]
[@1,1:1='\n',<361>,1:1]



[@2,2:1='<EOF>',<-1>,2:0]

tree:
(prog 
   (expr 
      (symbols a)) \n)

calc:

result:
None
a_{\alpha} \langle \psi_{\alpha} | \psi_{\beta} \rangle


input_stream:
a_{\alpha} \langle \psi_{\alpha} | \psi_{\beta} \rangle


tokens:
[@0,0:0='a',<116>,1:0]
[@1,1:1='_',<359>,1:1]
[@2,2:2='{',<391>,1:2]
[@3,3:8='\alpha',<436>,1:3]
[@4,9:9='}',<392>,1:9]
[@5,11:17='\langle',<149>,1:11]
[@6,19:22='\psi',<436>,1:19]
[@7,23:23='_',<359>,1:23]
[@8,24:24='{',<391>,1:24]
[@9,25:30='\alpha',<436>,1:25]
[@10,31:31='}',<392>,1:31]
[@11,35:38='\psi',<436>,1:35]
[@12,39:39='_',<359>,1:39]
[@13,40:40='{',<391>,1:40]
[@14,41:45='\beta',<436>,1:41]
[@15,46:46='}',<392>,1:46]
[@16,48:54='\rangle',<150>,1:48]
[@17,55:55='\n',<361>,1:55]



[@18,56:55='<EOF>',<-1>,2:0]

tree:
(prog 
   (expr 
      (expr 
         (symbols a)) _ 
      (expr { 
         (expr 
            (symbols \alpha)) })) 
   (expr 
      (symbols \langle)) 
   (expr 
      (expr 
         (symbols \psi)) _ 
      (expr { 
         (expr 
            (symbols \alpha)) })) 
   (expr 
      (expr 
         (symbols \psi)) _ 
      (expr { 
         (expr 
            (symbols \beta)) })) 
   (expr 
      (symbols \rangle)) \n)

calc:

result:
None
t


input_stream:
t


tokens:
[@0,0:0='t',<107>,1:0]
[@1,1:1='\n',<361>,1:1]



[@2,2:1='<EOF>',<-1>,2:0]

tree:
(prog 
   (expr 
      (symbols t)) \n)

calc:

result:
None
f


input_stream:
f


tokens:
[@0,1:1='\n',<361>,1:1]



[@1,2:1='<EOF>',<-1>,2:0]

tree:
prog

calc:

result:
None
\frac{-\hbar^2}{2m}


input_stream:
\frac{-\hbar^2}{2m}


tokens:
[@0,0:4='\frac',<82>,1:0]
[@1,5:5='{',<391>,1:5]
[@2,6:6='-',<354>,1:6]
[@3,7:11='\hbar',<309>,1:7]
[@4,12:12='^',<355>,1:12]
[@5,13:13='2',<362>,1:13]
[@6,14:14='}',<392>,1:14]
[@7,15:15='{',<391>,1:15]
[@8,16:16='2',<362>,1:16]
[@9,17:17='m',<110>,1:17]
[@10,18:18='}',<392>,1:18]
[@11,19:19='\n',<361>,1:19]



[@12,20:19='<EOF>',<-1>,2:0]

tree:
(prog 
   (expr 
      (frac \frac { 
         (expr 
            (symbols -)))) 
   (expr 
      (expr 
         (letter_like_symbols \hbar)) ^ 
      (expr 
         (number 2))))

calc:

result:
2
(\sin(x))^2


input_stream:
(\sin(x))^2


tokens:
[@0,0:0='(',<389>,1:0]
[@1,1:4='\sin',<388>,1:1]
[@2,5:5='(',<389>,1:5]
[@3,6:6='x',<103>,1:6]
[@4,7:7=')',<390>,1:7]
[@5,8:8=')',<390>,1:8]
[@6,9:9='^',<355>,1:9]
[@7,10:10='2',<362>,1:10]
[@8,11:11='\n',<361>,1:11]



[@9,12:11='<EOF>',<-1>,2:0]

tree:
(prog 
   (expr 
      (expr ( 
         (expr \sin ( 
            (expr 
               (symbols x)) )) )) ^ 
   (expr 
      (number 2))) \n)

calc:

result:
None
t


input_stream:
t


tokens:
[@0,0:0='t',<107>,1:0]
[@1,1:1='\n',<361>,1:1]



[@2,2:1='<EOF>',<-1>,2:0]

tree:
(prog 
   (expr 
      (symbols t)) \n)

calc:

result:
None
x


input_stream:
x


tokens:
[@0,0:0='x',<103>,1:0]
[@1,1:1='\n',<361>,1:1]



[@2,2:1='<EOF>',<-1>,2:0]

tree:
(prog 
   (expr 
      (symbols x)) \n)

calc:

result:
None
c/a


input_stream:
c/a


tokens:
[@0,0:0='c',<123>,1:0]
[@1,1:1='/',<357>,1:1]
[@2,2:2='a',<116>,1:2]
[@3,3:3='\n',<361>,1:3]



[@4,4:3='<EOF>',<-1>,2:0]

tree:
(prog 
   (expr 
      (expr 
         (symbols c)) / 
      (expr 
         (symbols a))) \n)

calc:
<class 'NoneType'>

result:
None
e


input_stream:
e


tokens:
[@0,0:0='e',<115>,1:0]
[@1,1:1='\n',<361>,1:1]



[@2,2:1='<EOF>',<-1>,2:0]

tree:
(prog 
   (expr 
      (symbols e)) \n)

calc:

result:
None
2(\sin(x))^2


input_stream:
2(\sin(x))^2


tokens:
[@0,0:0='2',<362>,1:0]
[@1,1:1='(',<389>,1:1]
[@2,2:5='\sin',<388>,1:2]
[@3,6:6='(',<389>,1:6]
[@4,7:7='x',<103>,1:7]
[@5,8:8=')',<390>,1:8]
[@6,9:9=')',<390>,1:9]
[@7,10:10='^',<355>,1:10]
[@8,11:11='2',<362>,1:11]
[@9,12:12='\n',<361>,1:12]



[@10,13:12='<EOF>',<-1>,2:0]

tree:
(prog 
   (expr 
      (number 2)) 
   (expr 
      (expr ( 
         (expr \sin ( 
            (expr 
               (symbols x)) )) )) ^ 
   (expr 
      (number 2))) \n)

calc:

result:
None
i


input_stream:
i


tokens:
[@0,0:0='i',<129>,1:0]
[@1,1:1='\n',<361>,1:1]



[@2,2:1='<EOF>',<-1>,2:0]

tree:
(prog 
   (expr 
      (symbols i)) \n)

calc:

result:
None
x


input_stream:
x


tokens:
[@0,0:0='x',<103>,1:0]
[@1,1:1='\n',<361>,1:1]



[@2,2:1='<EOF>',<-1>,2:0]

tree:
(prog 
   (expr 
      (symbols x)) \n)

calc:

result:
None
(\sin(x))^2


input_stream:
(\sin(x))^2


tokens:
[@0,0:0='(',<389>,1:0]
[@1,1:4='\sin',<388>,1:1]
[@2,5:5='(',<389>,1:5]
[@3,6:6='x',<103>,1:6]
[@4,7:7=')',<390>,1:7]
[@5,8:8=')',<390>,1:8]
[@6,9:9='^',<355>,1:9]
[@7,10:10='2',<362>,1:10]
[@8,11:11='\n',<361>,1:11]



[@9,12:11='<EOF>',<-1>,2:0]

tree:
(prog 
   (expr 
      (expr ( 
         (expr \sin ( 
            (expr 
               (symbols x)) )) )) ^ 
   (expr 
      (number 2))) \n)

calc:

result:
None
T


input_stream:
T


tokens:
[@0,0:0='T',<91>,1:0]
[@1,1:1='\n',<361>,1:1]



[@2,2:1='<EOF>',<-1>,2:0]

tree:
(prog 
   (expr 
      (symbols T)) \n)

calc:

result:
None
\cos(2 x)


input_stream:
\cos(2 x)


tokens:
[@0,0:3='\cos',<388>,1:0]
[@1,4:4='(',<389>,1:4]
[@2,5:5='2',<362>,1:5]
[@3,7:7='x',<103>,1:7]
[@4,8:8=')',<390>,1:8]
[@5,9:9='\n',<361>,1:9]



[@6,10:9='<EOF>',<-1>,2:0]

tree:
(prog 
   (expr \cos ( 
      (expr 
         (number 2)) x )) \n)

calc:

result:
None
\psi(x)


input_stream:
\psi(x)


tokens:
[@0,0:6='\psi(x)',<56>,1:0]
[@1,7:7='\n',<361>,1:7]



[@2,8:7='<EOF>',<-1>,2:0]

tree:
(prog 
   (expr 
      (maybe_common \psi
         (x))) \n)

calc:

result:
None
\frac{n \pi}{W}x


input_stream:
\frac{n \pi}{W}x


tokens:
[@0,0:4='\frac',<82>,1:0]
[@1,5:5='{',<391>,1:5]
[@2,6:6='n',<112>,1:6]
[@3,8:10='\pi',<436>,1:8]
[@4,11:11='}',<392>,1:11]
[@5,12:12='{',<391>,1:12]
[@6,13:13='W',<119>,1:13]
[@7,14:14='}',<392>,1:14]
[@8,15:15='x',<103>,1:15]
[@9,16:16='\n',<361>,1:16]



[@10,17:16='<EOF>',<-1>,2:0]

tree:
(prog 
   (expr 
      (frac \frac { 
         (expr 
            (symbols n)) \pi } { 
         (expr 
            (symbols W)) })) 
   (expr 
      (symbols x)) \n)

calc:

result:
None
a^2\frac{2}{W}


input_stream:
a^2\frac{2}{W}


tokens:
[@0,0:0='a',<116>,1:0]
[@1,1:1='^',<355>,1:1]
[@2,2:2='2',<362>,1:2]
[@3,3:7='\frac',<82>,1:3]
[@4,8:8='{',<391>,1:8]
[@5,9:9='2',<362>,1:9]
[@6,10:10='}',<392>,1:10]
[@7,11:11='{',<391>,1:11]
[@8,12:12='W',<119>,1:12]
[@9,13:13='}',<392>,1:13]
[@10,14:14='\n',<361>,1:14]



[@11,15:14='<EOF>',<-1>,2:0]

tree:
(prog 
   (expr 
      (expr 
         (symbols a)) ^ 
      (expr 
         (number 2))) 
   (expr 
      (frac \frac { 
         (expr 
            (number 2)) } { 
         (expr 
            (symbols W)) })) \n)

calc:

result:
None
\frac{2n\pi}{W}


input_stream:
\frac{2n\pi}{W}


tokens:
[@0,0:4='\frac',<82>,1:0]
[@1,5:5='{',<391>,1:5]
[@2,6:6='2',<362>,1:6]
[@3,7:7='n',<112>,1:7]
[@4,8:10='\pi',<436>,1:8]
[@5,11:11='}',<392>,1:11]
[@6,12:12='{',<391>,1:12]
[@7,13:13='W',<119>,1:13]
[@8,14:14='}',<392>,1:14]
[@9,15:15='\n',<361>,1:15]



[@10,16:15='<EOF>',<-1>,2:0]

tree:
(prog 
   (expr 
      (frac \frac { 
         (expr 
            (number 2)))) 
   (expr 
      (symbols n)) 
   (expr 
      (symbols \pi)))

calc:

result:
None
v du


input_stream:
v du


tokens:
[@0,0:0='v',<106>,1:0]
[@1,2:2='d',<120>,1:2]
[@2,4:4='\n',<361>,1:4]



[@3,5:4='<EOF>',<-1>,2:0]

tree:
(prog 
   (expr 
      (symbols v)) 
   (expr 
      (symbols d)) \n)

calc:

result:
None
\psi


input_stream:
\psi


tokens:
[@0,0:3='\psi',<436>,1:0]
[@1,4:4='\n',<361>,1:4]



[@2,5:4='<EOF>',<-1>,2:0]

tree:
(prog 
   (expr 
      (symbols \psi)) \n)

calc:

result:
None
1/2


input_stream:
1/2


tokens:
[@0,0:0='1',<362>,1:0]
[@1,1:1='/',<357>,1:1]
[@2,2:2='2',<362>,1:2]
[@3,3:3='\n',<361>,1:3]



[@4,4:3='<EOF>',<-1>,2:0]

tree:
(prog 
   (expr 
      (expr 
         (number 1)) / 
      (expr 
         (number 2))) \n)

calc:
<class 'int'>

result:
None
y


input_stream:
y


tokens:
[@0,0:0='y',<104>,1:0]
[@1,1:1='\n',<361>,1:1]



[@2,2:1='<EOF>',<-1>,2:0]

tree:
(prog 
   (expr 
      (symbols y)) \n)

calc:

result:
None
1 = \int_0^W a \sin\left(\frac{n \pi}{W} x\right) \psi(x)^* dx


input_stream:
1 = \int_0^W a \sin\left(\frac{n \pi}{W} x\right) \psi(x)^* dx


tokens:
[@0,0:0='1',<362>,1:0]
[@1,2:2='=',<364>,1:2]
[@2,4:7='\int',<66>,1:4]
[@3,8:8='_',<359>,1:8]
[@4,9:9='0',<362>,1:9]
[@5,10:10='^',<355>,1:10]
[@6,11:11='W',<119>,1:11]
[@7,13:13='a',<116>,1:13]
[@8,15:18='\sin',<388>,1:15]
[@9,25:29='\frac',<82>,1:25]
[@10,30:30='{',<391>,1:30]
[@11,31:31='n',<112>,1:31]
[@12,33:35='\pi',<436>,1:33]
[@13,36:36='}',<392>,1:36]
[@14,37:37='{',<391>,1:37]
[@15,38:38='W',<119>,1:38]
[@16,39:39='}',<392>,1:39]
[@17,41:41='x',<103>,1:41]
[@18,42:43='\r',<134>,1:42]
[@19,44:44='i',<129>,1:44]
[@20,45:45='g',<113>,1:45]
[@21,47:47='t',<107>,1:47]
[@22,48:48=')',<390>,1:48]
[@23,50:56='\psi(x)',<56>,1:50]
[@24,57:57='^',<355>,1:57]
[@25,58:58='*',<356>,1:58]
[@26,60:61='dx',<143>,1:60]
[@27,62:62='\n',<361>,1:62]



[@28,63:62='<EOF>',<-1>,2:0]

tree:
(prog 
   (expr 
      (expr 
         (number 1)) 
      (relation_operators =) 
      (expr 
         (expr 
            (maybe_common \int)) _ 
         (expr 
            (expr 
               (number 0)) ^ 
            (expr 
               (symbols W))))) 
   (expr 
      (symbols a)) 
   (expr \sin <missing '
      ('> 
         (expr 
            (frac \frac { 
               (expr 
                  (symbols n)) \pi } { 
               (expr 
                  (symbols W)) })) <missing ')'>) 
   (expr 
      (symbols x)) 
   (expr 
      (symbols \r)) 
   (expr 
      (symbols i)) 
   (expr 
      (symbols g)) 
   (expr 
      (symbols t)))

calc:

result:
None
\lambda = \frac{v}{f}


input_stream:
\lambda = \frac{v}{f}


tokens:
[@0,0:6='\lambda',<436>,1:0]
[@1,8:8='=',<364>,1:8]
[@2,10:14='\frac',<82>,1:10]
[@3,15:15='{',<391>,1:15]
[@4,16:16='v',<106>,1:16]
[@5,17:17='}',<392>,1:17]
[@6,18:18='{',<391>,1:18]
[@7,20:20='}',<392>,1:20]
[@8,21:21='\n',<361>,1:21]



[@9,22:21='<EOF>',<-1>,2:0]

tree:
(prog 
   (expr 
      (expr 
         (symbols \lambda)) 
      (relation_operators =) 
      (expr 
         (frac \frac { 
            (expr 
               (symbols v)) } { expr }))) \n)

calc:

result:
None
\frac{1}{a^2} = \frac{1}{2}W - \frac{1}{2}\left. \frac{W}{2n\pi}\sin\left(\frac{2n\pi}{W} x\right) \right|_0^W


input_stream:
\frac{1}{a^2} = \frac{1}{2}W - \frac{1}{2}\left. \frac{W}{2n\pi}\sin\left(\frac{2n\pi}{W} x\right) \right|_0^W


tokens:
[@0,0:4='\frac',<82>,1:0]
[@1,5:5='{',<391>,1:5]
[@2,6:6='1',<362>,1:6]
[@3,7:7='}',<392>,1:7]
[@4,8:8='{',<391>,1:8]
[@5,9:9='a',<116>,1:9]
[@6,10:10='^',<355>,1:10]
[@7,11:11='2',<362>,1:11]
[@8,12:12='}',<392>,1:12]
[@9,14:14='=',<364>,1:14]
[@10,16:20='\frac',<82>,1:16]
[@11,21:21='{',<391>,1:21]
[@12,22:22='1',<362>,1:22]
[@13,23:23='}',<392>,1:23]
[@14,24:24='{',<391>,1:24]
[@15,25:25='2',<362>,1:25]
[@16,26:26='}',<392>,1:26]
[@17,27:27='W',<119>,1:27]
[@18,29:29='-',<354>,1:29]
[@19,31:35='\frac',<82>,1:31]
[@20,36:36='{',<391>,1:36]
[@21,37:37='1',<362>,1:37]
[@22,38:38='}',<392>,1:38]
[@23,39:39='{',<391>,1:39]
[@24,40:40='2',<362>,1:40]
[@25,41:41='}',<392>,1:41]
[@26,49:53='\frac',<82>,1:49]
[@27,54:54='{',<391>,1:54]
[@28,55:55='W',<119>,1:55]
[@29,56:56='}',<392>,1:56]
[@30,57:57='{',<391>,1:57]
[@31,58:58='2',<362>,1:58]
[@32,59:59='n',<112>,1:59]
[@33,60:62='\pi',<436>,1:60]
[@34,63:63='}',<392>,1:63]
[@35,64:67='\sin',<388>,1:64]
[@36,74:78='\frac',<82>,1:74]
[@37,79:79='{',<391>,1:79]
[@38,80:80='2',<362>,1:80]
[@39,81:81='n',<112>,1:81]
[@40,82:84='\pi',<436>,1:82]
[@41,85:85='}',<392>,1:85]
[@42,86:86='{',<391>,1:86]
[@43,87:87='W',<119>,1:87]
[@44,88:88='}',<392>,1:88]
[@45,90:90='x',<103>,1:90]
[@46,91:92='\r',<134>,1:91]
[@47,93:93='i',<129>,1:93]
[@48,94:94='g',<113>,1:94]
[@49,96:96='t',<107>,1:96]
[@50,97:97=')',<390>,1:97]
[@51,99:100='\r',<134>,1:99]
[@52,101:101='i',<129>,1:101]
[@53,102:102='g',<113>,1:102]
[@54,104:104='t',<107>,1:104]
[@55,106:106='_',<359>,1:106]
[@56,107:107='0',<362>,1:107]
[@57,108:108='^',<355>,1:108]
[@58,109:109='W',<119>,1:109]
[@59,110:110='\n',<361>,1:110]



[@60,111:110='<EOF>',<-1>,2:0]

tree:
(prog 
   (expr 
      (expr 
         (frac \frac { 
            (expr 
               (number 1)) } { 
            (expr 
               (expr 
                  (symbols a)) ^ 
               (expr 
                  (number 2))) })) 
      (relation_operators =) 
      (expr 
         (frac \frac { 
            (expr 
               (number 1)) } { 
            (expr 
               (number 2)) }))) 
   (expr 
      (expr 
         (symbols W)) - 
      (expr 
         (frac \frac { 
            (expr 
               (number 1)) } { 
            (expr 
               (number 2)) }))) 
   (expr 
      (frac \frac { 
         (expr 
            (symbols W)) } { 
         (expr 
            (number 2)) <missing '}'>)) 
   (expr 
      (symbols n)) 
   (expr 
      (symbols \pi)))

calc:

result:
None
k = \frac{2 \pi}{v T}


input_stream:
k = \frac{2 \pi}{v T}


tokens:
[@0,0:0='k',<121>,1:0]
[@1,2:2='=',<364>,1:2]
[@2,4:8='\frac',<82>,1:4]
[@3,9:9='{',<391>,1:9]
[@4,10:10='2',<362>,1:10]
[@5,12:14='\pi',<436>,1:12]
[@6,15:15='}',<392>,1:15]
[@7,16:16='{',<391>,1:16]
[@8,17:17='v',<106>,1:17]
[@9,19:19='T',<91>,1:19]
[@10,20:20='}',<392>,1:20]
[@11,21:21='\n',<361>,1:21]



[@12,22:21='<EOF>',<-1>,2:0]

tree:
(prog 
   (expr 
      (expr 
         (symbols k)) 
      (relation_operators =) 
      (expr 
         (frac \frac { 
            (expr 
               (number 2)) \pi } { 
            (expr 
               (symbols v)) T }))) \n)

calc:

result:
None
\int \cos(a x) dx = \frac{1}{a}\sin(a x)


input_stream:
\int \cos(a x) dx = \frac{1}{a}\sin(a x)


tokens:
[@0,0:3='\int',<66>,1:0]
[@1,5:8='\cos',<388>,1:5]
[@2,9:9='(',<389>,1:9]
[@3,10:10='a',<116>,1:10]
[@4,12:12='x',<103>,1:12]
[@5,13:13=')',<390>,1:13]
[@6,15:16='dx',<143>,1:15]
[@7,18:18='=',<364>,1:18]
[@8,20:24='\frac',<82>,1:20]
[@9,25:25='{',<391>,1:25]
[@10,26:26='1',<362>,1:26]
[@11,27:27='}',<392>,1:27]
[@12,28:28='{',<391>,1:28]
[@13,29:29='a',<116>,1:29]
[@14,30:30='}',<392>,1:30]
[@15,31:34='\sin',<388>,1:31]
[@16,35:35='(',<389>,1:35]
[@17,36:36='a',<116>,1:36]
[@18,38:38='x',<103>,1:38]
[@19,39:39=')',<390>,1:39]
[@20,40:40='\n',<361>,1:40]



[@21,41:40='<EOF>',<-1>,2:0]

tree:
(prog 
   (expr 
      (maybe_common \int)) 
   (expr \cos ( 
      (expr 
         (symbols a)) x )) 
   (expr 
      (expr 
         (symbols dx)) 
      (relation_operators =) 
      (expr 
         (frac \frac { 
            (expr 
               (number 1)) } { 
            (expr 
               (symbols a)) }))) 
   (expr \sin ( 
      (expr 
         (symbols a)) x )) \n)

calc:

result:
None
\langle \psi| \hat{A}^+ |\psi \rangle = \langle a \rangle^*


input_stream:
\langle \psi| \hat{A}^+ |\psi \rangle = \langle a \rangle^*


tokens:
[@0,0:6='\langle',<149>,1:0]
[@1,8:11='\psi',<436>,1:8]
[@2,17:17='t',<107>,1:17]
[@3,18:18='{',<391>,1:18]
[@4,19:19='A',<135>,1:19]
[@5,20:20='}',<392>,1:20]
[@6,21:21='^',<355>,1:21]
[@7,22:22='+',<353>,1:22]
[@8,25:28='\psi',<436>,1:25]
[@9,30:36='\rangle',<150>,1:30]
[@10,38:38='=',<364>,1:38]
[@11,40:46='\langle',<149>,1:40]
[@12,48:48='a',<116>,1:48]
[@13,50:56='\rangle',<150>,1:50]
[@14,57:57='^',<355>,1:57]
[@15,58:58='*',<356>,1:58]
[@16,59:59='\n',<361>,1:59]



[@17,60:59='<EOF>',<-1>,2:0]

tree:
(prog 
   (expr 
      (symbols \langle)) 
   (expr 
      (symbols \psi)) 
   (expr 
      (symbols t)) 
   (expr 
      (expr { 
         (expr 
            (symbols A)) }) ^ 
      (expr 
         (symbols +))) 
   (expr 
      (symbols \psi)) 
   (expr 
      (expr 
         (symbols \rangle)) 
      (relation_operators =) 
      (expr 
         (symbols \langle))) 
   (expr 
      (symbols a)) 
   (expr 
      (expr 
         (expr 
            (symbols \rangle)) ^ expr) * expr) \n)

calc:
<class 'NoneType'>
x = \langle\psi_{\alpha}| a_{\beta} |\psi_{\beta} \rangle


input_stream:
x = \langle\psi_{\alpha}| a_{\beta} |\psi_{\beta} \rangle


tokens:
[@0,0:0='x',<103>,1:0]
[@1,2:2='=',<364>,1:2]
[@2,4:10='\langle',<149>,1:4]
[@3,11:14='\psi',<436>,1:11]
[@4,15:15='_',<359>,1:15]
[@5,16:16='{',<391>,1:16]
[@6,17:22='\alpha',<436>,1:17]
[@7,23:23='}',<392>,1:23]
[@8,26:26='a',<116>,1:26]
[@9,27:27='_',<359>,1:27]
[@10,28:28='{',<391>,1:28]
[@11,29:33='\beta',<436>,1:29]
[@12,34:34='}',<392>,1:34]
[@13,37:40='\psi',<436>,1:37]
[@14,41:41='_',<359>,1:41]
[@15,42:42='{',<391>,1:42]
[@16,43:47='\beta',<436>,1:43]
[@17,48:48='}',<392>,1:48]
[@18,50:56='\rangle',<150>,1:50]
[@19,57:57='\n',<361>,1:57]



[@20,58:57='<EOF>',<-1>,2:0]

tree:
(prog 
   (expr 
      (expr 
         (symbols x)) 
      (relation_operators =) 
      (expr 
         (symbols \langle))) 
   (expr 
      (expr 
         (symbols \psi)) _ 
      (expr { 
         (expr 
            (symbols \alpha)) })) 
   (expr 
      (expr 
         (symbols a)) _ 
      (expr { 
         (expr 
            (symbols \beta)) })) 
   (expr 
      (expr 
         (symbols \psi)) _ 
      (expr { 
         (expr 
            (symbols \beta)) })) 
   (expr 
      (symbols \rangle)) \n)

calc:

result:
None
k W = n \pi


input_stream:
k W = n \pi


tokens:
[@0,0:0='k',<121>,1:0]
[@1,2:2='W',<119>,1:2]
[@2,4:4='=',<364>,1:4]
[@3,6:6='n',<112>,1:6]
[@4,8:10='\pi',<436>,1:8]
[@5,11:11='\n',<361>,1:11]



[@6,12:11='<EOF>',<-1>,2:0]

tree:
(prog 
   (expr 
      (symbols k)) 
   (expr 
      (expr 
         (symbols W)) 
      (relation_operators =) 
      (expr 
         (symbols n))) 
   (expr 
      (symbols \pi)) \n)

calc:

result:
None
0 = a \sin(k W)


input_stream:
0 = a \sin(k W)


tokens:
[@0,0:0='0',<362>,1:0]
[@1,2:2='=',<364>,1:2]
[@2,4:4='a',<116>,1:4]
[@3,6:9='\sin',<388>,1:6]
[@4,10:10='(',<389>,1:10]
[@5,11:11='k',<121>,1:11]
[@6,13:13='W',<119>,1:13]
[@7,14:14=')',<390>,1:14]
[@8,15:15='\n',<361>,1:15]



[@9,16:15='<EOF>',<-1>,2:0]

tree:
(prog 
   (expr 
      (expr 
         (number 0)) 
      (relation_operators =) 
      (expr 
         (symbols a))) 
   (expr \sin ( 
      (expr 
         (symbols k)) W )) \n)

calc:

result:
None
p = h/\lambda


input_stream:
p = h/\lambda


tokens:
[@0,0:0='p',<101>,1:0]
[@1,2:2='=',<364>,1:2]
[@2,5:5='/',<357>,1:5]
[@3,6:12='\lambda',<436>,1:6]
[@4,13:13='\n',<361>,1:13]



[@5,14:13='<EOF>',<-1>,2:0]

tree:
(prog 
   (expr 
      (expr 
         (symbols p)) 
      (relation_operators =) 
      (expr / 
         (symbols \lambda))) \n)

calc:

result:
None
E = h f


input_stream:
E = h f


tokens:
[@0,2:2='=',<364>,1:2]
[@1,7:7='\n',<361>,1:7]



[@2,8:7='<EOF>',<-1>,2:0]

tree:
prog

calc:

result:
None
p = m v


input_stream:
p = m v


tokens:
[@0,0:0='p',<101>,1:0]
[@1,2:2='=',<364>,1:2]
[@2,4:4='m',<110>,1:4]
[@3,6:6='v',<106>,1:6]
[@4,7:7='\n',<361>,1:7]



[@5,8:7='<EOF>',<-1>,2:0]

tree:
(prog 
   (expr 
      (expr 
         (symbols p)) 
      (relation_operators =) 
      (expr 
         (symbols m))) 
   (expr 
      (symbols v)) \n)

calc:

result:
None
p^2 = m^2 v^2


input_stream:
p^2 = m^2 v^2


tokens:
[@0,0:0='p',<101>,1:0]
[@1,1:1='^',<355>,1:1]
[@2,2:2='2',<362>,1:2]
[@3,4:4='=',<364>,1:4]
[@4,6:6='m',<110>,1:6]
[@5,7:7='^',<355>,1:7]
[@6,8:8='2',<362>,1:8]
[@7,10:10='v',<106>,1:10]
[@8,11:11='^',<355>,1:11]
[@9,12:12='2',<362>,1:12]
[@10,13:13='\n',<361>,1:13]



[@11,14:13='<EOF>',<-1>,2:0]

tree:
(prog 
   (expr 
      (expr 
         (expr 
            (symbols p)) ^ 
         (expr 
            (number 2))) 
      (relation_operators =) 
      (expr 
         (expr 
            (symbols m)) ^ 
         (expr 
            (number 2)))) 
   (expr 
      (expr 
         (symbols v)) ^ 
      (expr 
         (number 2))) \n)

calc:

result:
None
\frac{-\hbar^2}{2m} \nabla^2 = {\cal H}


input_stream:
\frac{-\hbar^2}{2m} \nabla^2 = {\cal H}


tokens:
[@0,0:4='\frac',<82>,1:0]
[@1,5:5='{',<391>,1:5]
[@2,6:6='-',<354>,1:6]
[@3,7:11='\hbar',<309>,1:7]
[@4,12:12='^',<355>,1:12]
[@5,13:13='2',<362>,1:13]
[@6,14:14='}',<392>,1:14]
[@7,15:15='{',<391>,1:15]
[@8,16:16='2',<362>,1:16]
[@9,17:17='m',<110>,1:17]
[@10,18:18='}',<392>,1:18]
[@11,23:23='b',<109>,1:23]
[@12,25:25='a',<116>,1:25]
[@13,26:26='^',<355>,1:26]
[@14,27:27='2',<362>,1:27]
[@15,29:29='=',<364>,1:29]
[@16,31:31='{',<391>,1:31]
[@17,32:35='\cal',<136>,1:32]
[@18,38:38='}',<392>,1:38]
[@19,39:39='\n',<361>,1:39]



[@20,40:39='<EOF>',<-1>,2:0]

tree:
(prog 
   (expr 
      (frac \frac { 
         (expr 
            (symbols -)))) 
   (expr 
      (expr 
         (letter_like_symbols \hbar)) ^ 
      (expr 
         (number 2))))

calc:

result:
2
\frac{1}{a^2} = \int_0^W \frac{1}{2} dx - \frac{1}{2} \int_0^W \cos\left(2\frac{n \pi}{W}x\right) dx


input_stream:
\frac{1}{a^2} = \int_0^W \frac{1}{2} dx - \frac{1}{2} \int_0^W \cos\left(2\frac{n \pi}{W}x\right) dx


tokens:
[@0,0:4='\frac',<82>,1:0]
[@1,5:5='{',<391>,1:5]
[@2,6:6='1',<362>,1:6]
[@3,7:7='}',<392>,1:7]
[@4,8:8='{',<391>,1:8]
[@5,9:9='a',<116>,1:9]
[@6,10:10='^',<355>,1:10]
[@7,11:11='2',<362>,1:11]
[@8,12:12='}',<392>,1:12]
[@9,14:14='=',<364>,1:14]
[@10,16:19='\int',<66>,1:16]
[@11,20:20='_',<359>,1:20]
[@12,21:21='0',<362>,1:21]
[@13,22:22='^',<355>,1:22]
[@14,23:23='W',<119>,1:23]
[@15,25:29='\frac',<82>,1:25]
[@16,30:30='{',<391>,1:30]
[@17,31:31='1',<362>,1:31]
[@18,32:32='}',<392>,1:32]
[@19,33:33='{',<391>,1:33]
[@20,34:34='2',<362>,1:34]
[@21,35:35='}',<392>,1:35]
[@22,37:38='dx',<143>,1:37]
[@23,40:40='-',<354>,1:40]
[@24,42:46='\frac',<82>,1:42]
[@25,47:47='{',<391>,1:47]
[@26,48:48='1',<362>,1:48]
[@27,49:49='}',<392>,1:49]
[@28,50:50='{',<391>,1:50]
[@29,51:51='2',<362>,1:51]
[@30,52:52='}',<392>,1:52]
[@31,54:57='\int',<66>,1:54]
[@32,58:58='_',<359>,1:58]
[@33,59:59='0',<362>,1:59]
[@34,60:60='^',<355>,1:60]
[@35,61:61='W',<119>,1:61]
[@36,63:66='\cos',<388>,1:63]
[@37,73:73='2',<362>,1:73]
[@38,74:78='\frac',<82>,1:74]
[@39,79:79='{',<391>,1:79]
[@40,80:80='n',<112>,1:80]
[@41,82:84='\pi',<436>,1:82]
[@42,85:85='}',<392>,1:85]
[@43,86:86='{',<391>,1:86]
[@44,87:87='W',<119>,1:87]
[@45,88:88='}',<392>,1:88]
[@46,89:89='x',<103>,1:89]
[@47,90:91='\r',<134>,1:90]
[@48,92:92='i',<129>,1:92]
[@49,93:93='g',<113>,1:93]
[@50,95:95='t',<107>,1:95]
[@51,96:96=')',<390>,1:96]
[@52,98:99='dx',<143>,1:98]
[@53,100:100='\n',<361>,1:100]



[@54,101:100='<EOF>',<-1>,2:0]

tree:
(prog 
   (expr 
      (expr 
         (frac \frac { 
            (expr 
               (number 1)) } { 
            (expr 
               (expr 
                  (symbols a)) ^ 
               (expr 
                  (number 2))) })) 
      (relation_operators =) 
      (expr 
         (expr 
            (maybe_common \int)) _ 
         (expr 
            (expr 
               (number 0)) ^ 
            (expr 
               (symbols W))))) 
   (expr 
      (frac \frac { 
         (expr 
            (number 1)) } { 
         (expr 
            (number 2)) })) 
   (expr 
      (expr 
         (symbols dx)) - 
      (expr 
         (frac \frac { 
            (expr 
               (number 1)) } { 
            (expr 
               (number 2)) }))) 
   (expr 
      (expr 
         (maybe_common \int)) _ 
      (expr 
         (expr 
            (number 0)) ^ 
         (expr 
            (symbols W)))) 
   (expr \cos <missing '
      ('> 
         (expr 
            (number 2)) <missing ')'>) 
   (expr 
      (frac \frac { 
         (expr 
            (symbols n)) \pi } { 
         (expr 
            (symbols W)) })) 
   (expr 
      (symbols x)) 
   (expr 
      (symbols \r)) 
   (expr 
      (symbols i)) 
   (expr 
      (symbols g)) 
   (expr 
      (symbols t)))

calc:

result:
None
\frac{1}{a^2} = \frac{1}{2}W - \frac{1}{2} \int_0^W \cos\left(2\frac{n \pi}{W}x\right) dx


input_stream:
\frac{1}{a^2} = \frac{1}{2}W - \frac{1}{2} \int_0^W \cos\left(2\frac{n \pi}{W}x\right) dx


tokens:
[@0,0:4='\frac',<82>,1:0]
[@1,5:5='{',<391>,1:5]
[@2,6:6='1',<362>,1:6]
[@3,7:7='}',<392>,1:7]
[@4,8:8='{',<391>,1:8]
[@5,9:9='a',<116>,1:9]
[@6,10:10='^',<355>,1:10]
[@7,11:11='2',<362>,1:11]
[@8,12:12='}',<392>,1:12]
[@9,14:14='=',<364>,1:14]
[@10,16:20='\frac',<82>,1:16]
[@11,21:21='{',<391>,1:21]
[@12,22:22='1',<362>,1:22]
[@13,23:23='}',<392>,1:23]
[@14,24:24='{',<391>,1:24]
[@15,25:25='2',<362>,1:25]
[@16,26:26='}',<392>,1:26]
[@17,27:27='W',<119>,1:27]
[@18,29:29='-',<354>,1:29]
[@19,31:35='\frac',<82>,1:31]
[@20,36:36='{',<391>,1:36]
[@21,37:37='1',<362>,1:37]
[@22,38:38='}',<392>,1:38]
[@23,39:39='{',<391>,1:39]
[@24,40:40='2',<362>,1:40]
[@25,41:41='}',<392>,1:41]
[@26,43:46='\int',<66>,1:43]
[@27,47:47='_',<359>,1:47]
[@28,48:48='0',<362>,1:48]
[@29,49:49='^',<355>,1:49]
[@30,50:50='W',<119>,1:50]
[@31,52:55='\cos',<388>,1:52]
[@32,62:62='2',<362>,1:62]
[@33,63:67='\frac',<82>,1:63]
[@34,68:68='{',<391>,1:68]
[@35,69:69='n',<112>,1:69]
[@36,71:73='\pi',<436>,1:71]
[@37,74:74='}',<392>,1:74]
[@38,75:75='{',<391>,1:75]
[@39,76:76='W',<119>,1:76]
[@40,77:77='}',<392>,1:77]
[@41,78:78='x',<103>,1:78]
[@42,79:80='\r',<134>,1:79]
[@43,81:81='i',<129>,1:81]
[@44,82:82='g',<113>,1:82]
[@45,84:84='t',<107>,1:84]
[@46,85:85=')',<390>,1:85]
[@47,87:88='dx',<143>,1:87]
[@48,89:89='\n',<361>,1:89]



[@49,90:89='<EOF>',<-1>,2:0]

tree:
(prog 
   (expr 
      (expr 
         (frac \frac { 
            (expr 
               (number 1)) } { 
            (expr 
               (expr 
                  (symbols a)) ^ 
               (expr 
                  (number 2))) })) 
      (relation_operators =) 
      (expr 
         (frac \frac { 
            (expr 
               (number 1)) } { 
            (expr 
               (number 2)) }))) 
   (expr 
      (expr 
         (symbols W)) - 
      (expr 
         (frac \frac { 
            (expr 
               (number 1)) } { 
            (expr 
               (number 2)) }))) 
   (expr 
      (expr 
         (maybe_common \int)) _ 
      (expr 
         (expr 
            (number 0)) ^ 
         (expr 
            (symbols W)))) 
   (expr \cos <missing '
      ('> 
         (expr 
            (number 2)) <missing ')'>) 
   (expr 
      (frac \frac { 
         (expr 
            (symbols n)) \pi } { 
         (expr 
            (symbols W)) })) 
   (expr 
      (symbols x)) 
   (expr 
      (symbols \r)) 
   (expr 
      (symbols i)) 
   (expr 
      (symbols g)) 
   (expr 
      (symbols t)))

calc:

result:
None
a_{\beta} \langle \psi_{\alpha} | \psi_{\beta} \rangle = a_{\alpha} \langle \psi_{\alpha} | \psi_{\beta} \rangle


input_stream:
a_{\beta} \langle \psi_{\alpha} | \psi_{\beta} \rangle = a_{\alpha} \langle \psi_{\alpha} | \psi_{\beta} \rangle


tokens:
[@0,0:0='a',<116>,1:0]
[@1,1:1='_',<359>,1:1]
[@2,2:2='{',<391>,1:2]
[@3,3:7='\beta',<436>,1:3]
[@4,8:8='}',<392>,1:8]
[@5,10:16='\langle',<149>,1:10]
[@6,18:21='\psi',<436>,1:18]
[@7,22:22='_',<359>,1:22]
[@8,23:23='{',<391>,1:23]
[@9,24:29='\alpha',<436>,1:24]
[@10,30:30='}',<392>,1:30]
[@11,34:37='\psi',<436>,1:34]
[@12,38:38='_',<359>,1:38]
[@13,39:39='{',<391>,1:39]
[@14,40:44='\beta',<436>,1:40]
[@15,45:45='}',<392>,1:45]
[@16,47:53='\rangle',<150>,1:47]
[@17,55:55='=',<364>,1:55]
[@18,57:57='a',<116>,1:57]
[@19,58:58='_',<359>,1:58]
[@20,59:59='{',<391>,1:59]
[@21,60:65='\alpha',<436>,1:60]
[@22,66:66='}',<392>,1:66]
[@23,68:74='\langle',<149>,1:68]
[@24,76:79='\psi',<436>,1:76]
[@25,80:80='_',<359>,1:80]
[@26,81:81='{',<391>,1:81]
[@27,82:87='\alpha',<436>,1:82]
[@28,88:88='}',<392>,1:88]
[@29,92:95='\psi',<436>,1:92]
[@30,96:96='_',<359>,1:96]
[@31,97:97='{',<391>,1:97]
[@32,98:102='\beta',<436>,1:98]
[@33,103:103='}',<392>,1:103]
[@34,105:111='\rangle',<150>,1:105]
[@35,112:112='\n',<361>,1:112]



[@36,113:112='<EOF>',<-1>,2:0]

tree:
(prog 
   (expr 
      (expr 
         (symbols a)) _ 
      (expr { 
         (expr 
            (symbols \beta)) })) 
   (expr 
      (symbols \langle)) 
   (expr 
      (expr 
         (symbols \psi)) _ 
      (expr { 
         (expr 
            (symbols \alpha)) })) 
   (expr 
      (expr 
         (symbols \psi)) _ 
      (expr { 
         (expr 
            (symbols \beta)) })) 
   (expr 
      (expr 
         (symbols \rangle)) 
      (relation_operators =) 
      (expr 
         (expr 
            (symbols a)) _ 
         (expr { 
            (expr 
               (symbols \alpha)) }))) 
   (expr 
      (symbols \langle)) 
   (expr 
      (expr 
         (symbols \psi)) _ 
      (expr { 
         (expr 
            (symbols \alpha)) })) 
   (expr 
      (expr 
         (symbols \psi)) _ 
      (expr { 
         (expr 
            (symbols \beta)) })) 
   (expr 
      (symbols \rangle)) \n)

calc:

result:
None
\cos(2 x) = 1 - 2 (\sin(x))^2


input_stream:
\cos(2 x) = 1 - 2 (\sin(x))^2


tokens:
[@0,0:3='\cos',<388>,1:0]
[@1,4:4='(',<389>,1:4]
[@2,5:5='2',<362>,1:5]
[@3,7:7='x',<103>,1:7]
[@4,8:8=')',<390>,1:8]
[@5,10:10='=',<364>,1:10]
[@6,12:12='1',<362>,1:12]
[@7,14:14='-',<354>,1:14]
[@8,16:16='2',<362>,1:16]
[@9,18:18='(',<389>,1:18]
[@10,19:22='\sin',<388>,1:19]
[@11,23:23='(',<389>,1:23]
[@12,24:24='x',<103>,1:24]
[@13,25:25=')',<390>,1:25]
[@14,26:26=')',<390>,1:26]
[@15,27:27='^',<355>,1:27]
[@16,28:28='2',<362>,1:28]
[@17,29:29='\n',<361>,1:29]



[@18,30:29='<EOF>',<-1>,2:0]

tree:
(prog 
   (expr 
      (expr \cos ( 
         (expr 
            (number 2)) x )) 
   (relation_operators =) 
   (expr 
      (expr 
         (number 1)) - 
      (expr 
         (number 2)))) 
   (expr 
      (expr ( 
         (expr \sin ( 
            (expr 
               (symbols x)) )) )) ^ 
   (expr 
      (number 2))) \n)

calc:

result:
None
